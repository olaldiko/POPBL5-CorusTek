.TH "rasPi-EmergencyStation/tcpServerSocketComm.c" 3 "Mon Jan 25 2016" "Version 0.1" "Skynet - Emergency station" \" -*- nroff -*-
.ad l
.nh
.SH NAME
rasPi-EmergencyStation/tcpServerSocketComm.c \- Server connection related function headers\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'tcpServerSocketComm\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBSSC_initServerConnection\fP ()"
.br
.RI "\fIInitialize the connection to the server\&. \fP"
.ti -1c
.RI "void \fBSSC_initBuffers\fP ()"
.br
.RI "\fIInitialize the buffers involved in the server communication\&. \fP"
.ti -1c
.RI "void \fBSSC_initServerConnThreads\fP ()"
.br
.RI "\fIStart the threads for listening and sending messages to the server\&. \fP"
.ti -1c
.RI "void \fBSSC_stopServerConn\fP ()"
.br
.RI "\fIShutdown the connection to the server\&. \fP"
.ti -1c
.RI "void \fBSSC_makeServerConnection\fP ()"
.br
.RI "\fICreate the connection to the server\&. \fP"
.ti -1c
.RI "void \fBSSC_sendMessageToServer\fP (\fBPMESSAGE\fP msg)"
.br
.RI "\fISend a message to the server\&. \fP"
.ti -1c
.RI "void \fBSSC_listenToServerMsg\fP ()"
.br
.RI "\fIListen to the messages coming to the server\&. \fP"
.ti -1c
.RI "void * \fBSSC_msgSenderThreadFunc\fP (void *args)"
.br
.RI "\fIThread to send the messages stored in the outbox to the server\&. \fP"
.ti -1c
.RI "void * \fBSSC_msgListenerThreadFunc\fP (void *args)"
.br
.RI "\fIThread to listen to messages coming from the server\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBSSC_STAT\fP \fBserverSocketStat\fP"
.br
.RI "\fIStructure containing all the parameters for the connection to the server and it's state\&. \fP"
.ti -1c
.RI "\fBPMSGBUFF\fP \fBSSC_serverSendBuffer\fP"
.br
.RI "\fIOutbox for the messages to be sent to the server\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Server connection related function headers\&. 


.SH "Function Documentation"
.PP 
.SS "void SSC_initBuffers ()"

.PP
Initialize the buffers involved in the server communication\&. 
.SS "void SSC_initServerConnection ()"

.PP
Initialize the connection to the server\&. Initializes the sockets and resolves the DNS name of the server to connect to\&. It then calls the other functions to continue the initialization\&. 
.SS "void SSC_initServerConnThreads ()"

.PP
Start the threads for listening and sending messages to the server\&. 
.SS "void SSC_listenToServerMsg ()"

.PP
Listen to the messages coming to the server\&. 8 It listens to new messages, storing them to a message structure if they are valid\&. Then it puts them in the parser inbox\&. 
.SS "void SSC_makeServerConnection ()"

.PP
Create the connection to the server\&. Tryes to connect to the server\&. If the connection fails\&. Waits for a time period wthich grows exponentially\&. 
.SS "void* SSC_msgListenerThreadFunc (void * args)"

.PP
Thread to listen to messages coming from the server\&. It waits for new messages to arrive\&. If the connection has failed, tryes to reconnect to the server\&. 
.SS "void* SSC_msgSenderThreadFunc (void * args)"

.PP
Thread to send the messages stored in the outbox to the server\&. It waits for messages to be put in the server's outbox and sends these when they are available\&. 
.SS "void SSC_sendMessageToServer (\fBPMESSAGE\fP msg)"

.PP
Send a message to the server\&. It directly sends a message to the server by reading it from a message structure\&. 
.PP
\fBParameters:\fP
.RS 4
\fImsg\fP The message to send\&. 
.RE
.PP

.SS "void SSC_stopServerConn ()"

.PP
Shutdown the connection to the server\&. It tryes to shutdown and close the socket gracefully\&. It then wait to the threads to exit by sending them a stop condition\&. 
.SH "Variable Documentation"
.PP 
.SS "\fBSSC_STAT\fP serverSocketStat"

.PP
Structure containing all the parameters for the connection to the server and it's state\&. 
.SS "\fBPMSGBUFF\fP SSC_serverSendBuffer"

.PP
Outbox for the messages to be sent to the server\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Skynet - Emergency station from the source code\&.
