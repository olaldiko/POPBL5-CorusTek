.TH "rasPi-EmergencyStation/stationActions.h" 3 "Thu Jan 21 2016" "Version 0.1" "Emergency station" \" -*- nroff -*-
.ad l
.nh
.SH NAME
rasPi-EmergencyStation/stationActions.h \- FIle containing all the station action headers\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include 'structures\&.h'\fP
.br
\fC#include 'messageParser\&.h'\fP
.br
\fC#include 'msgBuffers\&.h'\fP
.br
\fC#include 'tcpServerSocketComm\&.h'\fP
.br
\fC#include 'tcpVehicleSocketComm\&.h'\fP
.br
\fC#include 'mcastMessaging\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBSA_treatIDMessage\fP (\fBPMESSAGE\fP msg)"
.br
.ti -1c
.RI "void \fBSA_treatIDReqMessage\fP (\fBPMESSAGE\fP msg)"
.br
.RI "\fIFunction to treat the ID Request Messages\&. \fP"
.ti -1c
.RI "void \fBSA_treatIDAssign\fP (\fBPMESSAGE\fP msg)"
.br
.RI "\fIFunction to treat the ID Assign messages\&. \fP"
.ti -1c
.RI "void \fBSA_treatLOCMessage\fP (\fBPMESSAGE\fP msg)"
.br
.RI "\fIFunction to treat the Location messages\&. \fP"
.ti -1c
.RI "void \fBSA_treatRouteMessage\fP (\fBPMESSAGE\fP msg)"
.br
.RI "\fIFunction to treat the route messages sent by the server\&. \fP"
.ti -1c
.RI "void \fBSA_treatListMessage\fP (\fBPMESSAGE\fP msg)"
.br
.RI "\fIFunction to treat the initial vehicle list message\&. \fP"
.ti -1c
.RI "void \fBSA_treatStatusMessage\fP (\fBPMESSAGE\fP msg)"
.br
.RI "\fIFunction to treat the Status messages coming from the vehicle\&. \fP"
.ti -1c
.RI "void \fBSA_treatAlertMessage\fP (\fBPMESSAGE\fP msg)"
.br
.RI "\fIFunction to treat the Alert messages coming from the server\&. \fP"
.ti -1c
.RI "void \fBSA_sendConnectedMsg\fP (int id)"
.br
.RI "\fISend the vehicle connected message to the server\&. \fP"
.ti -1c
.RI "void \fBSA_sendDisconnectedMsg\fP (int id)"
.br
.RI "\fISend the vehicle disconnected message to the server\&. \fP"
.ti -1c
.RI "void \fBSA_sendJoinMessage\fP (int id)"
.br
.RI "\fISend the Join multicast group message to the vehicle\&. \fP"
.ti -1c
.RI "void \fBSA_initVehicleList\fP ()"
.br
.RI "\fIVehicle list initializer\&. \fP"
.ti -1c
.RI "void \fBSA_initVehicle\fP (\fBSA_PVEHICLE_DATA\fP vehicle, int id)"
.br
.RI "\fIFunction to initialize a new vehicle structure\&. \fP"
.ti -1c
.RI "\fBSA_PVEHICLE_DATA\fP \fBSA_addVehicleToList\fP (int id)"
.br
.RI "\fIAdd a new vehicle to the vehicle list\&. \fP"
.ti -1c
.RI "\fBSA_PVEHICLE_DATA\fP \fBSA_searchVehicleById\fP (int id)"
.br
.RI "\fISearch a vehicle by ID\&. \fP"
.ti -1c
.RI "\fBSA_PVEHICLE_DATA\fP \fBSA_searchVehicleBySocket\fP (int socket)"
.br
.RI "\fISearch a vehicle by socket number\&. \fP"
.ti -1c
.RI "\fBSA_PVEHICLE_DATA\fP \fBSA_searchVehicleByInboxThread\fP (pthread_t inboxThread)"
.br
.RI "\fISearch a vehicle by it's inbox handling thread\&. \fP"
.ti -1c
.RI "int \fBSA_countVehiclesInList\fP ()"
.br
.RI "\fICount the vehicles on the vehicle list\&. \fP"
.ti -1c
.RI "\fBSA_PVEHICLE_DATA\fP \fBSA_getVehicleByIndex\fP (int index)"
.br
.RI "\fIGet the vehicle that is on the n-th position in the list\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBSA_VEHICLE_LIST\fP \fBvehicleList\fP"
.br
.RI "\fIList where all the vehicles are stored\&. \fP"
.ti -1c
.RI "int \fBstationID\fP"
.br
.RI "\fIID of the staion\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
FIle containing all the station action headers\&. 


.SH "Function Documentation"
.PP 
.SS "\fBSA_PVEHICLE_DATA\fP SA_addVehicleToList (int id)"

.PP
Add a new vehicle to the vehicle list\&. Adds the vehicle with the corresponding id to the list and returns the pointer to that newly created vehicle\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP The vehicle ID to assign\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The pointer to the newly created vehicle\&. 
.RE
.PP

.SS "int SA_countVehiclesInList ()"

.PP
Count the vehicles on the vehicle list\&. Counts the vehicle amount in the vehicle list and returns th quantity\&. 
.PP
\fBReturns:\fP
.RS 4
The number of vehicles on the list\&. 
.RE
.PP

.SS "\fBSA_PVEHICLE_DATA\fP SA_getVehicleByIndex (int index)"

.PP
Get the vehicle that is on the n-th position in the list\&. Receives the list index by parameter and returns the vehicle on that index if it's found\&. Returns NULL if not found\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP The index to get the vehicle from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The pointer to the vehicle element if it's found\&. NULL if not found\&. 
.RE
.PP

.SS "void SA_initVehicle (\fBSA_PVEHICLE_DATA\fP vehicle, int id)"

.PP
Function to initialize a new vehicle structure\&. Assigns the id passed by parameter to the vehicle, initializes the outbox and creates a new thread to wait for messages from it\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvehicle\fP The vehicle structure pointer to initialize\&. 
.br
\fIid\fP The id that will be assigned to the vehicle\&. 
.RE
.PP

.SS "void SA_initVehicleList ()"

.PP
Vehicle list initializer\&. Initializes the vehicle list by creating the mutex element and setting the element number to 0\&. 
.SS "\fBSA_PVEHICLE_DATA\fP SA_searchVehicleById (int id)"

.PP
Search a vehicle by ID\&. Searchs a vehicle that has the specified ID in the vehicle list\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP The vehicle ID to search\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The pointer to the vehicle if found\&. NULL if the vehicle is not found\&. 
.RE
.PP

.SS "\fBSA_PVEHICLE_DATA\fP SA_searchVehicleByInboxThread (pthread_t inboxThread)"

.PP
Search a vehicle by it's inbox handling thread\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinboxThread\fP The threading reading inbound messages\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The pointer to the vehicle element if found\&. Returns else if not found\&. 
.RE
.PP

.SS "\fBSA_PVEHICLE_DATA\fP SA_searchVehicleBySocket (int socket)"

.PP
Search a vehicle by socket number\&. Searchs a vehicle that has the same socket number that the one passed by parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsocket\fP The socket to search\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The pointer to the vehicle if found\&. NULL if the vehicle is not found\&. 
.RE
.PP

.SS "void SA_sendConnectedMsg (int id)"

.PP
Send the vehicle connected message to the server\&. This function builds the connected message by receiving the vehicle id by parameter, building the message and putting it into the server outbox\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP The vehicle ID\&. 
.RE
.PP

.SS "void SA_sendDisconnectedMsg (int id)"

.PP
Send the vehicle disconnected message to the server\&. This function receives the vehicle ID by parameter, builds the message and puts it in the server outbox\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP The vehicle ID\&. 
.RE
.PP

.SS "void SA_sendJoinMessage (int id)"

.PP
Send the Join multicast group message to the vehicle\&. When a vehicle connects, this function sends the message to that vehicle by getting the ID by parameter, getting the multicast group from the station, building the message and then putting it into the vehicles outbox\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP The vehicle ID\&. 
.RE
.PP

.SS "void SA_treatAlertMessage (\fBPMESSAGE\fP msg)"

.PP
Function to treat the Alert messages coming from the server\&. Receives the message by parameter and forwards it to the outbox of the station multicast group\&. 
.PP
\fBParameters:\fP
.RS 4
\fImsg\fP The received message structure\&. 
.RE
.PP

.SS "void SA_treatIDAssign (\fBPMESSAGE\fP msg)"

.PP
Function to treat the ID Assign messages\&. It search for the vehicle with the corresponding socket no, establishes the ID in the vehicle list and finally forwards the ID assign message to the vehicle\&. 
.PP
\fBParameters:\fP
.RS 4
\fImsg\fP The structure of the received message\&. 
.RE
.PP

.SS "void SA_treatIDMessage (\fBPMESSAGE\fP msg)"

.SS "void SA_treatIDReqMessage (\fBPMESSAGE\fP msg)"

.PP
Function to treat the ID Request Messages\&. Generates the IDrequest message with the station ID as the ID and the vehicle socket number in the message field\&. 
.PP
\fBParameters:\fP
.RS 4
\fImsg\fP The message structure\&. 
.RE
.PP

.SS "void SA_treatListMessage (\fBPMESSAGE\fP msg)"

.PP
Function to treat the initial vehicle list message\&. Receives a vehicle list from the server, and adds these vehicles to the station's vehicle list\&. 
.PP
\fBParameters:\fP
.RS 4
\fImsg\fP The received message structure\&. 
.RE
.PP

.SS "void SA_treatLOCMessage (\fBPMESSAGE\fP msg)"

.PP
Function to treat the Location messages\&. Fowrwards the location messages sent by the vehicles to the server\&. 
.PP
\fBParameters:\fP
.RS 4
\fImsg\fP The received message structure\&. 
.RE
.PP

.SS "void SA_treatRouteMessage (\fBPMESSAGE\fP msg)"

.PP
Function to treat the route messages sent by the server\&. Receives the route message, search for the referred message addressee and forwards the message\&. If the vehicle is not found\&. It sends a NACK to the server\&. 
.PP
\fBParameters:\fP
.RS 4
\fImsg\fP The received message structure\&. 
.RE
.PP

.SS "void SA_treatStatusMessage (\fBPMESSAGE\fP msg)"

.PP
Function to treat the Status messages coming from the vehicle\&. Receives the status message and forwards it to the server send buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fImsg\fP The received message\&. 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "int stationID"

.PP
ID of the staion\&. 
.SS "\fBSA_VEHICLE_LIST\fP vehicleList"

.PP
List where all the vehicles are stored\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Emergency station from the source code\&.
